package artistenverein.Personenverwaltung;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.junit.BeforeClass;
import org.junit.Test;

import org.salespointframework.useraccount.UserAccount;

import artistenverein.AbstractIntegrationTests;
import artistenverein.Personenverwaltung.Artistengruppe;
import artistenverein.Personenverwaltung.User;

public class ArtistengruppenTest extends AbstractIntegrationTests {

	private static Artistengruppe gruppeB;

	private static User artistA;
	private static User artistC;

	@BeforeClass
	public static void setUp() {
		new Artistengruppe("GruppeA");
		gruppeB = new Artistengruppe("GruppeB");

		artistA = new User(new UserAccount());
		new User(new UserAccount());
		artistC = new User(new UserAccount());
		
		gruppeB.addMitglied(artistC);
	}

	@Test
	public void GruppeNullPointerAndEmptyString() {
		try {
			new Artistengruppe(null);

			fail("Artistengruppe.Artistengruppe() sollte eine IllegalArgumentException werfen, wenn das Argument Gruppenname null ist!");
		} catch (IllegalArgumentException e) {
			assertEquals(e.getMessage(), "Gruppenname darf nicht null sein!");
		}

		try {
			new Artistengruppe("");

			fail("Artistengruppe.Artistengruppe() sollte eine IllegalArgumentException werfen, wenn das Argument Gruppenname leer ist!");
		} catch (IllegalArgumentException e) {
			assertEquals(e.getMessage(), "Gruppenname darf nicht leer sein!");
		}
	}

	@Test
	public void MitgliedHinzufuegen() {

		gruppeB.addMitglied(artistA);
		assertTrue("Gruppe muss ein Mitglied hinzufügen können!",gruppeB.getMitglieder().contains(artistA));
	}
	@Test
	public void MitgliedEntfernen()
	{
		gruppeB.entferneMitglied(artistC);
		assertTrue("Gruppe muss ein Mitglied entfernen können!",!gruppeB.getMitglieder().contains(artistC));
		
	}

}
